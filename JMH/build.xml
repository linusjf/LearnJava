<?xml version="1.0"?>
<project name="JMH"
         default="main"
         basedir=".">
  <property name="jmh.ver"
            value="1.26" />
  <property name="tmp.dir"
            value="/tmp/jmhclasses" />
  <property file="build.properties" />
  <property file="../globalbuild.properties" />
  <property file="../checkstyle.properties" />
  <property file="../gformat.properties" />
  <property file="../pmd.properties" />
  <property file="../spotbugs.properties" />
  <property file="../antcontrib.properties" />
  <property file="../jmh.properties" />
  <property file="../groovy-ant.properties" />
  <!-- Sets variables which can later be used. -->
  <!-- The value of a property is accessed via ${} -->
  <property name="src.dir"
            location="." />
  <property name="build.dir"
            location="." />
  <property name="dist.dir"
            location="dist" />
  <property name="docs.dir"
            location="docs" />
  <property name="jmh-core.jar"
            location="${build.dir}/libs/jmh-core.jar" />
  <property name="jmh-generator-annprocess.jar"
            location="${build.dir}/libs/jmh-generator-annprocess.jar" />
  <property name="joptsimple.jar"
            location="${build.dir}/libs/joptsimple.jar" />
  <property name="commonsmath.jar"
            location="${build.dir}/libs/commonsmath.jar" />
  <target name="setupclasspath">
    <description>setupclasspath target</description>
    <exec executable="bash">
      <arg value="./setupclasspath" />
    </exec>
  </target>
  <target name="download-libs"
          description="Download libraries">
    <mkdir dir="${build.dir}/libs/" />
    <get src="https://repo1.maven.org/maven2/org/openjdk/jmh/jmh-core/${jmh.ver}/jmh-core-${jmh.ver}.jar"
         dest="${jmh-core.jar}"
         verbose="true"
         usetimestamp="true"
         skipexisting="true" />
    <get src="https://repo1.maven.org/maven2/org/openjdk/jmh/jmh-generator-annprocess/${jmh.ver}/jmh-generator-annprocess-${jmh.ver}.jar"
         dest="${jmh-generator-annprocess.jar}"
         verbose="true"
         usetimestamp="true"
         skipexisting="true" />
    <get src="https://repo1.maven.org/maven2/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar"
         dest="${joptsimple.jar}"
         verbose="true"
         usetimestamp="true"
         skipexisting="true" />
    <get src="https://repo1.maven.org/maven2/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar"
         dest="${commonsmath.jar}"
         verbose="true"
         usetimestamp="true"
         skipexisting="true" />
  </target>
  <target name="jarbenchmarks"
          description="Generate the self-contained JAR"
          depends="download-libs">
    <delete file="${dist.dir}/benchmarks.jar" />
    <jar jarfile="${dist.dir}/benchmarks.jar"
         basedir="${build.dir}">
      <manifest>
        <attribute name="Main-Class"
                   value="org.openjdk.jmh.Main" />
      </manifest>
      <zipfileset src="${jmh-core.jar}"
                  excludes="**/META-INF/services/**" />
      <zipfileset src="${joptsimple.jar}" />
      <zipfileset src="${commonsmath.jar}" />
    </jar>
  </target>
  <target name="loadclasspath"
          depends="setupclasspath">
    <loadfile property="cs.cp"
              srcFile="../${cs.classpath.file}" />
    <loadfile property="pmd.cp"
              srcFile="../${pmd.classpath.file}" />
    <loadfile property="spotbugs.cp"
              srcfile="../${spotbugs.classpath.file}" />
    <loadfile property="spotbugs-plugins.cp"
              srcfile="../${spotbugs-plugin.classpath.file}" />
    <loadfile property="antcontrib.cp"
              srcFile="../${antcontrib.classpath.file}" />
    <loadfile property="groovy-ant.cp"
              srcFile="../${groovy-ant.classpath.file}" />
    <loadfile property="compilerclasspath"
              srcFile="${compile.cp}" />
    <loadfile property="runclasspath"
              srcFile="${run.cp}" />
  </target>
  <!-- Deletes the existing build, docs and dist directory-->
  <target name="clean">
    <delete>
      <fileset dir="."
               includes="**/*.class" />
      <fileset dir="jmh/jmh_generated"
               includes="**/*.java" />
    </delete>
    <delete dir="${docs.dir}" />
    <delete dir="${dist.dir}" />
  </target>
  <!-- Creates the  build, docs and dist directory-->
  <target name="makedir">
    <mkdir dir="${docs.dir}" />
    <mkdir dir="${dist.dir}" />
  </target>
  <!-- Compiles the java code (including the usage of library for JUnit -->
  <target name="compile"
          depends="loadclasspath,clean, makedir,format,checkstyle">
    <javac includeantruntime="false"
           srcdir="${src.dir}"
           destdir="${build.dir}"
           classpath="${compilerclasspath}">
      <compilerarg value="${javac.params}" />
      <compilerarg value="${javac.params1}" />
    </javac>
  </target>
  <!-- Creates Javadoc -->
  <target name="docs"
          depends="loadclasspath,compile">
    <javadoc packagenames="${packages}"
             destdir="${docs.dir}"
             sourcepath="${src.dir}"
             additionalparam="${javadoc.params}"
             classpath="${compilerclasspath}"></javadoc>
  </target>
  <target name="manifest">
    <tstamp />
    <exec executable="bash"
          outputproperty="build">
      <arg value="-c" />
      <arg value="git log --pretty=format:'%h' | head -1" />
    </exec>
    <manifest mode="update"
              file="${jar.manifest}">
      <attribute name="Built-By"
                 value="${user.name}" />
      <section name="common">
        <attribute name="Specification-Title"
                   value="${ant.project.name}" />
        <attribute name="Specification-Version"
                   value="${version}" />
        <attribute name="Specification-Vendor"
                   value="" />
        <attribute name="Implementation-Title"
                   value="" />
        <attribute name="Implementation-Version"
                   value="${build} ${TODAY}" />
        <attribute name="Implementation-Vendor"
                   value="" />
      </section>
      <attribute name="Main-Class"
                 value="${jmh.main.class}" />
    </manifest>
  </target>
  <target name="unzip">
    <unzip src="${jarfile}"
           dest="${tmp.dir}"
           failOnEmptyArchive="true">
      <patternset>
        <exclude name="**/META-INF/services/**" />
      </patternset>
    </unzip>
  </target>
  <!--Creates the deployable jar file  -->
  <target name="jar"
          depends="loadclasspath,compile,manifest">
    <taskdef resource="net/sf/antcontrib/antlib.xml"
             classpath="${antcontrib.cp}">
      <taskdef name="groovy"
               classname="org.codehaus.groovy.ant.Groovy"
               classpath="${groovy-ant.cp}" />
      <delete dir="${tmp.dir}" />
      <foreach list="${runclasspath}"
               param="jarfile"
               delimiter=":"
               target="unzip"
               parallel="false"
               trim="true"
               inheritall="true" />
      <copy file="MANIFEST.MF"
            overwrite="true"
            todir="${tmp.dir}/META-INF">
        <copy file="META-INF/BenchmarkList"
              overwrite="true"
              todir="${tmp.dir}/META-INF">
          <copy file="META-INF/CompilerHints"
                overwrite="true"
                todir="${tmp.dir}/META-INF">
            <copy overwrite="true"
                  todir="${tmp.dir}">
              <fileset dir="${build.dir}">
                <include name="**/*.class" />
              </fileset>
            </copy>
            <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
                 basedir="${tmp.dir}">
              <manifest>
                <attribute name="Main-Class"
                           value="org.openjdk.jmh.Main" />
              </manifest>
            </jar>
            <!--  <groovy src="jar.groovy" /> -->
          </copy>
          <copy overwrite="true"
                todir="${tmp.dir}">
            <fileset dir="${build.dir}">
              <include name="**/*.class" />
            </fileset>
          </copy>
          <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
               basedir="${tmp.dir}">
            <manifest>
              <attribute name="Main-Class"
                         value="org.openjdk.jmh.Main" />
            </manifest>
          </jar>
          <!--  <groovy src="jar.groovy" /> -->
        </copy>
        <copy file="META-INF/CompilerHints"
              overwrite="true"
              todir="${tmp.dir}/META-INF">
          <copy overwrite="true"
                todir="${tmp.dir}">
            <fileset dir="${build.dir}">
              <include name="**/*.class" />
            </fileset>
          </copy>
          <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
               basedir="${tmp.dir}">
            <manifest>
              <attribute name="Main-Class"
                         value="org.openjdk.jmh.Main" />
            </manifest>
          </jar>
          <!--  <groovy src="jar.groovy" /> -->
        </copy>
        <copy overwrite="true"
              todir="${tmp.dir}">
          <fileset dir="${build.dir}">
            <include name="**/*.class" />
          </fileset>
        </copy>
        <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
             basedir="${tmp.dir}">
          <manifest>
            <attribute name="Main-Class"
                       value="org.openjdk.jmh.Main" />
          </manifest>
        </jar>
        <!--  <groovy src="jar.groovy" /> -->
      </copy>
      <copy file="META-INF/BenchmarkList"
            overwrite="true"
            todir="${tmp.dir}/META-INF">
        <copy file="META-INF/CompilerHints"
              overwrite="true"
              todir="${tmp.dir}/META-INF">
          <copy overwrite="true"
                todir="${tmp.dir}">
            <fileset dir="${build.dir}">
              <include name="**/*.class" />
            </fileset>
          </copy>
          <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
               basedir="${tmp.dir}">
            <manifest>
              <attribute name="Main-Class"
                         value="org.openjdk.jmh.Main" />
            </manifest>
          </jar>
          <!--  <groovy src="jar.groovy" /> -->
        </copy>
        <copy overwrite="true"
              todir="${tmp.dir}">
          <fileset dir="${build.dir}">
            <include name="**/*.class" />
          </fileset>
        </copy>
        <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
             basedir="${tmp.dir}">
          <manifest>
            <attribute name="Main-Class"
                       value="org.openjdk.jmh.Main" />
          </manifest>
        </jar>
        <!--  <groovy src="jar.groovy" /> -->
      </copy>
      <copy file="META-INF/CompilerHints"
            overwrite="true"
            todir="${tmp.dir}/META-INF">
        <copy overwrite="true"
              todir="${tmp.dir}">
          <fileset dir="${build.dir}">
            <include name="**/*.class" />
          </fileset>
        </copy>
        <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
             basedir="${tmp.dir}">
          <manifest>
            <attribute name="Main-Class"
                       value="org.openjdk.jmh.Main" />
          </manifest>
        </jar>
        <!--  <groovy src="jar.groovy" /> -->
      </copy>
      <copy overwrite="true"
            todir="${tmp.dir}">
        <fileset dir="${build.dir}">
          <include name="**/*.class" />
        </fileset>
      </copy>
      <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
           basedir="${tmp.dir}">
        <manifest>
          <attribute name="Main-Class"
                     value="org.openjdk.jmh.Main" />
        </manifest>
      </jar>
      <!--  <groovy src="jar.groovy" /> -->
    </taskdef>
    <taskdef name="groovy"
             classname="org.codehaus.groovy.ant.Groovy"
             classpath="${groovy-ant.cp}" />
    <delete dir="${tmp.dir}" />
    <foreach list="${runclasspath}"
             param="jarfile"
             delimiter=":"
             target="unzip"
             parallel="false"
             trim="true"
             inheritall="true" />
    <copy file="MANIFEST.MF"
          overwrite="true"
          todir="${tmp.dir}/META-INF">
      <copy file="META-INF/BenchmarkList"
            overwrite="true"
            todir="${tmp.dir}/META-INF">
        <copy file="META-INF/CompilerHints"
              overwrite="true"
              todir="${tmp.dir}/META-INF">
          <copy overwrite="true"
                todir="${tmp.dir}">
            <fileset dir="${build.dir}">
              <include name="**/*.class" />
            </fileset>
          </copy>
          <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
               basedir="${tmp.dir}">
            <manifest>
              <attribute name="Main-Class"
                         value="org.openjdk.jmh.Main" />
            </manifest>
          </jar>
          <!--  <groovy src="jar.groovy" /> -->
        </copy>
        <copy overwrite="true"
              todir="${tmp.dir}">
          <fileset dir="${build.dir}">
            <include name="**/*.class" />
          </fileset>
        </copy>
        <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
             basedir="${tmp.dir}">
          <manifest>
            <attribute name="Main-Class"
                       value="org.openjdk.jmh.Main" />
          </manifest>
        </jar>
        <!--  <groovy src="jar.groovy" /> -->
      </copy>
      <copy file="META-INF/CompilerHints"
            overwrite="true"
            todir="${tmp.dir}/META-INF">
        <copy overwrite="true"
              todir="${tmp.dir}">
          <fileset dir="${build.dir}">
            <include name="**/*.class" />
          </fileset>
        </copy>
        <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
             basedir="${tmp.dir}">
          <manifest>
            <attribute name="Main-Class"
                       value="org.openjdk.jmh.Main" />
          </manifest>
        </jar>
        <!--  <groovy src="jar.groovy" /> -->
      </copy>
      <copy overwrite="true"
            todir="${tmp.dir}">
        <fileset dir="${build.dir}">
          <include name="**/*.class" />
        </fileset>
      </copy>
      <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
           basedir="${tmp.dir}">
        <manifest>
          <attribute name="Main-Class"
                     value="org.openjdk.jmh.Main" />
        </manifest>
      </jar>
      <!--  <groovy src="jar.groovy" /> -->
    </copy>
    <copy file="META-INF/BenchmarkList"
          overwrite="true"
          todir="${tmp.dir}/META-INF">
      <copy file="META-INF/CompilerHints"
            overwrite="true"
            todir="${tmp.dir}/META-INF">
        <copy overwrite="true"
              todir="${tmp.dir}">
          <fileset dir="${build.dir}">
            <include name="**/*.class" />
          </fileset>
        </copy>
        <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
             basedir="${tmp.dir}">
          <manifest>
            <attribute name="Main-Class"
                       value="org.openjdk.jmh.Main" />
          </manifest>
        </jar>
        <!--  <groovy src="jar.groovy" /> -->
      </copy>
      <copy overwrite="true"
            todir="${tmp.dir}">
        <fileset dir="${build.dir}">
          <include name="**/*.class" />
        </fileset>
      </copy>
      <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
           basedir="${tmp.dir}">
        <manifest>
          <attribute name="Main-Class"
                     value="org.openjdk.jmh.Main" />
        </manifest>
      </jar>
      <!--  <groovy src="jar.groovy" /> -->
    </copy>
    <copy file="META-INF/CompilerHints"
          overwrite="true"
          todir="${tmp.dir}/META-INF">
      <copy overwrite="true"
            todir="${tmp.dir}">
        <fileset dir="${build.dir}">
          <include name="**/*.class" />
        </fileset>
      </copy>
      <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
           basedir="${tmp.dir}">
        <manifest>
          <attribute name="Main-Class"
                     value="org.openjdk.jmh.Main" />
        </manifest>
      </jar>
      <!--  <groovy src="jar.groovy" /> -->
    </copy>
    <copy overwrite="true"
          todir="${tmp.dir}">
      <fileset dir="${build.dir}">
        <include name="**/*.class" />
      </fileset>
    </copy>
    <jar jarfile="${dist.dir}/${ant.project.name}-${version}.jar"
         basedir="${tmp.dir}">
      <manifest>
        <attribute name="Main-Class"
                   value="org.openjdk.jmh.Main" />
      </manifest>
    </jar>
    <!--  <groovy src="jar.groovy" /> -->
  </target>
  <target name="run"
          depends="loadclasspath">
    <description>Run target</description>
    <java classname="${jmh.main.class}"
          fork="true">
      <arg line="HelloWorld" />
      <classpath>
        <pathelement location="${dist.dir}\${ant.project.name}-${version}.jar" />
        <pathelement path="${build.dir}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </java>
  </target>
  <target name="runbenchmarks">
    <description>Runbenchmarks target</description>
    <java classname="${jmh.main.class}"
          fork="true">
      <arg line="HelloWorld" />
      <classpath>
        <pathelement location="${dist.dir}\benchmarks.jar" />
        <pathelement path="${build.dir}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </java>
  </target>
  <target name="format">
    <fileset dir="${basedir}"
             id="javasrcs">
      <include name="**/*.java" />
    </fileset>
    <pathconvert property="sources"
                 refid="javasrcs"
                 pathsep=" " />
    <loadfile property="gformat.cp"
              srcFile="../${gformat.classpath.file}" />
    <java classname="${gformat.main.class}"
          fork="true">
      <arg line="-i ${sources}" />
      <classpath>
        <pathelement path="${gformat.cp}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </java>
    <exec executable="bash">
      <arg line="../cformat ${basedir}" />
    </exec>
    <exec executable="bash">
      <arg line="../xformatall ${basedir}" />
    </exec>
  </target>
  <target name="checkstyleg"
          depends="loadclasspath">
    <taskdef resource="net/sf/antcontrib/antlib.xml"
             classpath="${antcontrib.cp}">
      <move file="suppressions-xpath.xml"
            tofile="suppressions-xpath.xml.bak"
            preservelastmodified="true"
            force="true"
            failonerror="false"
            verbose="true" />
      <fileset dir="${basedir}"
               id="javasrcs">
        <include name="**/*.java" />
        <exclude name="**/jmh_generated/*.java" />
      </fileset>
      <pathconvert property="sources"
                   refid="javasrcs"
                   pathsep=" " />
      <loadfile property="cs.cp"
                srcFile="../${cs.classpath.file}" />
      <java classname="${cs.main.class}"
            logError="true">
        <arg line="-c ../${cs.config} -p ../${cs.properties} -o ${ant.project.name}-xpath.xml -g ${sources}" />
        <classpath>
          <pathelement path="${cs.cp}" />
          <pathelement path="${java.class.path}" />
        </classpath>
      </java>
      <condition property="file.is.empty"
                 else="false">
        <length file="${ant.project.name}-xpath.xml"
                when="equal"
                length="0" />
      </condition>
      <if>
        <equals arg1="${file.is.empty}"
                arg2="false" />
        <then>
          <move file="${ant.project.name}-xpath.xml"
                tofile="suppressions-xpath.xml"
                preservelastmodified="true"
                force="true"
                failonerror="true"
                verbose="true" />
        </then>
        <else>
          <echo message="No suppressions generated." />
          <delete file="${ant.project.name}-xpath.xml"
                  verbose="true"
                  failonerror="false" />
        </else>
      </if>
    </taskdef>
    <move file="suppressions-xpath.xml"
          tofile="suppressions-xpath.xml.bak"
          preservelastmodified="true"
          force="true"
          failonerror="false"
          verbose="true" />
    <fileset dir="${basedir}"
             id="javasrcs">
      <include name="**/*.java" />
      <exclude name="**/jmh_generated/*.java" />
    </fileset>
    <pathconvert property="sources"
                 refid="javasrcs"
                 pathsep=" " />
    <loadfile property="cs.cp"
              srcFile="../${cs.classpath.file}" />
    <java classname="${cs.main.class}"
          logError="true">
      <arg line="-c ../${cs.config} -p ../${cs.properties} -o ${ant.project.name}-xpath.xml -g ${sources}" />
      <classpath>
        <pathelement path="${cs.cp}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </java>
    <condition property="file.is.empty"
               else="false">
      <length file="${ant.project.name}-xpath.xml"
              when="equal"
              length="0" />
    </condition>
    <if>
      <equals arg1="${file.is.empty}"
              arg2="false" />
      <then>
        <move file="${ant.project.name}-xpath.xml"
              tofile="suppressions-xpath.xml"
              preservelastmodified="true"
              force="true"
              failonerror="true"
              verbose="true" />
      </then>
      <else>
        <echo message="No suppressions generated." />
        <delete file="${ant.project.name}-xpath.xml"
                verbose="true"
                failonerror="false" />
      </else>
    </if>
  </target>
  <target name="checkstyle"
          depends="loadclasspath">
    <taskdef resource="${cs.taskdef.resource}"
             classpath="${cs.cp}" />
    <first id="checkstylefile">
      <fileset dir=".."
               includes="${cs.config}" />
    </first>
    <checkstyle config="${toString:checkstylefile}"
                failOnViolation="false"
                properties="../${cs.properties}">
      <fileset dir="${src.dir}"
               excludes="jmh/jmh_generated/*.java" />
      <formatter type="plain" />
      <formatter type="plain"
                 toFile="${cs.output}" />
      <classpath>
        <pathelement path="${cs.cp}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </checkstyle>
  </target>
  <target name="pmd"
          depends="loadclasspath">
    <taskdef name="pmd"
             classname="net.sourceforge.pmd.ant.PMDTask"
             classpath="${pmd.cp}" />
    <property name="pmd.errCount"
              value="0" />
    <pmd cacheLocation="${pmd.cacheFile}"
         minimumPriority="${pmd.minimumPriority}"
         suppressMarker="${pmd.suppressMarker}"
         failuresPropertyName="pmd.errCount">
      <ruleset>../${pmd.config}</ruleset>
      <auxclasspath>
        <pathelement path="${basedir}" />
        <pathelement path="${runclasspath}" />
      </auxclasspath>
      <formatter type="${pmd.reportFormat}"
                 toFile="${pmd.output}"
                 toConsole="${pmd.toConsole}">
        <fileset dir="${basedir}">
          <exclude name="**/jmh_generated/*.java" />
          <include name="**/*.java" />
        </fileset>
      </formatter>
      <fileset dir="${basedir}">
        <exclude name="**/jmh_generated/*.java" />
        <include name="**/*.java" />
      </fileset>
    </pmd>
    <echo message="${pmd.errCount} violations found." />
  </target>
  <target name="spotbugs"
          depends="loadclasspath,compile">
    <taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties"
             classpath="${spotbugs.cp}:${spotbugs-plugins.cp}" />
    <spotbugs output="text"
              outputFile="${spotbugs.output}"
              reportLevel="low"
              effort="max"
              excludeFilter="suppressions-sb.xml"
              nested="true">
      <auxClasspath path="${basedir}">
        <sourcePath path="${basedir}">
          <fileset dir="${basedir}">
            <exclude name="**/jmh_generated/*.java" />
            <exclude name="**/jmh/*.java" />
          </fileset>
        </sourcePath>
        <fileset dir="${basedir}">
          <exclude name="jmh/jmh_generated/*.class" />
          <exclude name="jmh/*.class" />
          <exclude name="**/libs/*.jar" />
          <include name="jmh/package-info.class" />
          <include name="jmh/Tokenizer.class" />
        </fileset>
        <classpath>
          <pathelement path="${spotbugs.cp}" />
          <pathelement path="${java.class.path}" />
        </classpath>
      </auxClasspath>
      <sourcePath path="${basedir}">
        <fileset dir="${basedir}">
          <exclude name="**/jmh_generated/*.java" />
          <exclude name="**/jmh/*.java" />
        </fileset>
      </sourcePath>
      <fileset dir="${basedir}">
        <exclude name="jmh/jmh_generated/*.class" />
        <exclude name="jmh/*.class" />
        <exclude name="**/libs/*.jar" />
        <include name="jmh/package-info.class" />
        <include name="jmh/Tokenizer.class" />
      </fileset>
      <classpath>
        <pathelement path="${spotbugs.cp}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </spotbugs>
  </target>
  <target name="main"
          depends="loadclasspath,compile, pmd, spotbugs,jar,jarbenchmarks,docs">

    <description>Main target</description>
  </target>
</project>
