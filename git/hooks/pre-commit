#!/usr/bin/env bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

require() {
hash "$@" || exit 127;
}
require git cat find head tidy rm 
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test "$(git diff --cached --name-only --diff-filter=A -z "$against" |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c)" != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
#exec git diff-index --check --cached $against --

declare -r configFileName="tidy.config"
configFilePath="$(find .. -maxdepth 2 \
-type f -name "$configFileName" ! -path \
"**/.git/**" | head -n 1)"

# Regexp for grep to only choose some file extensions for formatting
exts="\.xml$"

# The formatter to use
formatter=$(which tidy)

# Check availability of the formatter
if [ -z "$formatter" ]
then
  1>&2 echo "$formatter not found. Pre-commit formatting will not be done."
  exit 0
fi

files="$(git diff --cached --name-only --diff-filter=ACMR | grep $exts)"
# Format staged files
for file in $files
do
  echo "Formatting $file"
  # Get the file from index
  git show ":$file" > "$file.tmp"
  # Format it
  "$formatter" -config "$configFilePath" -quiet -xml -m -i "$file.tmp"
  "$formatter" -config "$configFilePath" -quiet -xml -m -i "$file"
  # Create a blob object from the formatted file
  hash=$(git hash-object -w "$file.tmp")
  # Add it back to index
  git update-index --add --cacheinfo 100644 "$hash" "$file"
  # Remove the tmp file
  rm "$file.tmp"
done

# If no files left in index after formatting - fail
ret=0
if [ ! "$(git diff --cached --name-only)" ]; then
	if test -z "$files";
	then
		1>&2 echo "No files staged"
		exit 0
        else
		1>&2 echo "No files left after formatting"
  		exit 1
	fi
fi
exit "$ret"
