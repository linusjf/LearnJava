#!/usr/bin/env bash
######################################################################
# @author      : Linus Fernandes (linusfernandes@gmail.com)
# @file        : runj
# @created     : Friday Jul 5, 2019 16:31:33 IST
# @copyright   : Copyright (c) Linus Fernandes
# @description : 
######################################################################

usage ()
{
  echo 'Usage: run <dir> <class>'
  echo 'dir - project directory. Must exist'
  echo 'class - full name including package name of the main class. Overrides contents of .main under project directory.'
  exit 1
}

setUp ()
{
	cd "$proj" || \
    { echo "Unable to access folder $proj";exit 1;}
	[ -e "$setupScript" ] && \
    { ./"$setupScript" || \
      { \
        echo "Error running setup script";\
        exit 1;\
      }\
    }
	cd ..
}

tests ()
{
	cd "$proj" || \
    { echo "Unable to access folder $proj";exit 1;}
	[ -e "$testsScript" ] && \
    { ./"$testsScript" || \
      { \
        echo "Error running tests script";\
        exit 1;\
      }\
    }
	cd ..
}

tearDown ()
{
	cd "$proj" || \
    { echo "Unable to access folder $proj";exit 1;}
	[ -e "$teardownScript" ] && \
    {\
      ./"$teardownScript" || \
      {\
        echo "Error running teardown script";\
        exit 1;\
      }\
    }
	cd ..
}

isJVM ()
{
  type java &>/dev/null
  return $?
}

displayBanner ()
{
  echo "$banner"
}

runJVM()
{
  jarFile="$proj/dist/$proj-$version.jar"
  if [ -e "$jarFile" ]
    then
      setUp
      echo "Main class(es): $main"
     for a in "${main[@]}";
     do
      if [[ -z "$a" ]]
      then
        continue
      fi
      if [[ "$a" =~ ^#.* ]]
      then
        continue
      fi
      echo "Running $a...";echo
      cd "$proj" || exit $?
      printf -v cmdPrefix '%q ' java "${runOptions[@]}" -cp "${auxClasspath}:.:../${jarFile}:." 
      eval "$cmdPrefix $a && cd .." ||  cd .. 
    done
    tearDown;
    if [[ ${#main[@]} -gt 1 ]]
    then
      tests;
    fi
      exit 0;
    else
      echo "$jarFile does not exist. Run buildj or buildjall."
    exit 1
  fi
}

readVersion()
{
  [ -e "$versionFile" ] && \
      { version=$(cat "$versionFile") || \
      echo "Unable to read $versionFile";}
}

readBanner()
{
  [ -e "$proj/$bannerFile" ] && \
      { banner=$(cat "$proj/$bannerFile") || \
      echo "No banner file: $proj/$bannerFile";}
}

readAuxClassPath()
{
  [ -e "$proj/$runClasspathFile" ] && \
      { auxClasspath=$(cat "$proj/$runClasspathFile") || \
      echo "Unable to read $proj/$runClasspathFile";}
}

readRunOptions()
{
  [ -e "$proj/$runOptionsFile" ] && \
      { readarray -t runOptions < <(cat "$proj"/"$runOptionsFile") || \
      echo "Unable to read $proj/$runOptionsFile";}
}

require() {
hash "$@" || exit 127
}
require cat java 

declare -r setupScript="setup"
declare -r testsScript="tests"
declare -r teardownScript="teardown"
declare -r nomainFile=".nomain"
declare -r mainFile=".main"
declare -a main
proj="$1"
if [ -z "$proj" ]
  then
    usage
fi
if [ -e "$proj/$nomainFile" ]
  then
    echo "$proj"
    echo "Not an executable project."
    exit 1
fi

declare -r bannerFile=".runbanner"
declare -r versionFile=".version"
declare -r runOptionsFile=".runoptions"
declare -r runClasspathFile="run.cp"
declare -a runOptions
version="0.0.0"
banner=""
auxClasspath=""
if [ "$#" -ge 2 ]
then
  printf -v params "%s " "${@:2}"
  main[0]="$params"
else
  readarray main < "$proj"/"$mainFile" || \
    { echo "Error reading $proj/$mainFile";usage; }
fi
echo "$proj"
readBanner
readVersion
readRunOptions
readAuxClassPath

isJVM
jvm=$?
displayBanner
if [ $jvm -eq 0 ]
  then
    runJVM
fi

usage
