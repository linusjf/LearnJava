<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE
module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
"https://checkstyle.org/dtds/configuration_1_3.dtd">
<!--
Checkstyle configuration that checks the Google coding conventions from Google Java Style
that can be found at https://google.github.io/styleguide/javaguide.html.

Checkstyle is very configurable. Be sure to read the documentation at
http://checkstyle.sf.net (or in your downloaded distribution).

To completely disable a check, just comment it out or delete it from the file.

Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
-->
<module name="Checker">
  <property name="charset"
            value="${cs.charset}" />
  <property name="severity"
            value="${cs.severity}" />
  <property name="fileExtensions"
            value="${cs.fileExtensions}" />
  <property name="cacheFile"
            value="${cs.cacheFile}" />
  <property name="haltOnException"
            value="${cs.haltOnException}" />
  <module name="OrderedProperties" />
  <module name="BeforeExecutionExclusionFileFilter">
    <property name="fileNamePattern"
              value="(module\-info\.java$)|(package\-info\.java$)" />
  </module>
  <module name="SeverityMatchFilter">
    <property name="severity"
              value="ignore" />
    <property name="acceptOnMatch"
              value="false" />
  </module>
  <!-- Checks for whitespace                               -->
  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter">
    <property name="eachLine"
              value="true" />
    <property name="fileExtensions"
              value="java" />
  </module>
  <module name="SuppressionFilter">
    <property name="file"
              value="${cs.suppressions.file}" />
    <property name="optional"
              value="true" />
  </module>
  <module name="SuppressWarningsFilter" />
  <module name="JavadocPackage">
    <property name="allowLegacy"
              value="false" />
    <property name="fileExtensions"
              value=".java" />
  </module>
  <module name="RegexpHeader">
    <property name="headerFile"
              value="${cs.regexp.header.file}" />
    <property name="fileExtensions"
              value="java" />
  </module>
  <module name="LineLength">
    <property name="max"
              value="100" />
    <property name="ignorePattern"
              value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
    <property name="fileExtensions"
              value="java" />
  </module>
  <module name="FileLength" />
  <module name="RegexpOnFilename" />
  <module name="RegexpMultiline" />
  <module name="NewlineAtEndOfFile" />
  <module name="UniqueProperties">
    <property name="fileExtensions"
              value="properties, translations" />
  </module>
  <module name="Translation">
    <property name="fileExtensions"
              value="properties" />
  </module>
  <module name="SuppressWithPlainTextCommentFilter" />
  <module name="SuppressWithNearbyTextFilter" />
  <module name="TreeWalker">
    <module name="UnusedLocalVariable" />
    <module name="NoWhitespaceBeforeCaseDefaultColon" />
    <module name="RecordComponentName">
      <property name="format"
                value="^[a-z][a-zA-Z0-9]*$" />
    </module>
    <module name="JavadocMissingLeadingAsterisk" />
    <module name="LambdaBodyLength">
      <property name="max"
                value="10" />
    </module>
    <module name="AvoidDoubleBraceInitialization" />
    <module name="NoEnumTrailingComma" />
    <module name="NoArrayTrailingComma" />
    <module name="AvoidNoArgumentSuperConstructorCall" />
    <module name="UnnecessarySemicolonAfterOuterTypeDeclaration" />
    <module name="JavadocMissingWhitespaceAfterAsterisk" />
    <module name="NoCodeInFile" />
    <module name="JavadocContentLocationCheck" />
    <module name="TodoComment" />
    <module name="TrailingComment">
      <property name="legalComment"
                value="(.*clang-format.*|.*NOPMD.*|.*fall.*)" />
    </module>
    <module name="NoWhitespaceAfter" />
    <module name="EmptyForInitializerPad" />
    <module name="EmptyForIteratorPad" />
    <!--  <module name="AvoidInlineConditionals"/> -->
    <module name="CovariantEquals" />
    <module name="SuppressWithNearbyCommentFilter" />
    <module name="UnnecessarySemicolonAfterTypeMemberDeclaration" />
    <module name="JavadocBlockTagLocation">
      <property name="tags"
                value="author, deprecated, exception, hidden" />
      <property name="tags"
                value="param, provides, return, see, serial" />
      <property name="tags"
                value="serialData, serialField, since, throws" />
      <property name="tags"
                value="uses, version" />
      <property name="tags"
                value="noinspection" />
    </module>
    <module name="HiddenField">
      <property name="ignoreSetter"
                value="true" />
      <property name="ignoreConstructorParameter"
                value="true" />
    </module>
    <module name="DescendantToken">
      <property name="tokens"
                value="METHOD_CALL" />
      <property name="limitedTokens"
                value="METHOD_DEF" />
      <property name="maximumNumber"
                value="0" />
      <property name="maximumMessage"
                value="Use Java 8 Lambdas!" />
    </module>
    <module name="TypecastParenPad" />
    <module name="InnerTypeLast" />
    <module name="InterfaceIsType" />
    <module name="MutableException" />
    <module name="FinalClass" />
    <module name="ThrowsCount">
      <property name="max"
                value="4" />
      <property name="ignorePrivateMethods"
                value="true" />
    </module>
    <module name="VisibilityModifier">
      <property name="packageAllowed"
                value="true" />
      <property name="protectedAllowed"
                value="true" />
      <property name="allowPublicImmutableFields"
                value="true" />
      <property name="allowPublicFinalFields"
                value="true" />
    </module>
    <!--module name="DesignForExtension"/-->
    <module name="ConstantName" />
    <module name="NestedIfDepth" />
    <module name="CyclomaticComplexity">
      <property name="max"
                value="10" />
    </module>
    <module name="BooleanExpressionComplexity" />
    <module name="ClassDataAbstractionCoupling">
      <property name="excludedPackages"
                value="java.io" />
    </module>
    <module name="MethodCount" />
    <module name="ExecutableStatementCount" />
    <module name="ParameterNumber" />
    <module name="ClassFanOutComplexity" />
    <module name="JavaNCSS" />
    <module name="Regexp" />
    <module name="NPathComplexity" />
    <module name="SuppressionXpathSingleFilter">
      <property name="files"
                value="build\.properties" />
      <property name="id"
                value="XpathOrderedPropertie" />
      <property name="checks"
                value="OrderedProperties" />
    </module>
    <module name="SuppressionXpathFilter">
      <property name="optional"
                value="true" />
      <property name="file"
                value="${cs.suppressions-xpath.file}" />
    </module>
    <module name="SuppressWarningsHolder" />
    <module name="RegexpSinglelineJava">
      <property name="format"
                value="\.printStackTrace\(\)" />
      <property name="ignoreComments"
                value="true" />
      <property name="message"
                value="Using e.printStackTrace() is forbidden. Rethrow, log or handle the exception." />
    </module>
    <module name="RedundantModifier" />
    <module name="SingleSpaceSeparator">
      <property name="validateComments"
                value="false" />
    </module>
    <module name="MissingOverride">
      <property name="javaFiveCompatibility"
                value="false" />
    </module>
    <module name="AbstractClassName">
      <property name="ignoreModifier"
                value="true" />
    </module>
    <module name="LocalFinalVariableName" />
    <module name="StaticVariableName" />
    <module name="HideUtilityClassConstructor" />
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat"
                value="CHECKSTYLE.OFF\: ([\w\|]+)" />
      <property name="onCommentFormat"
                value="CHECKSTYLE.ON\: ([\w\|]+)" />
      <property name="checkFormat"
                value="$1" />
    </module>
    <module name="IllegalType">
      <property name="illegalClassNames"
                value="java.util.HashSet, HashSet, java.util.LinkedHashMap, LinkedHashMap, java.util.TreeMap, TreeMap, java.util.HashMap, HashMap, java.util.LinkedHashSet, LinkedHashSet, java.util.TreeSet, TreeSet, java.lang.StringBuffer, StringBuffer" />
    </module>
    <module name="IllegalInstantiation">
      <property name="classes"
                value="org.xml.sax.SAXException, org.xml.sax.SAXParseException, org.apache.commons.beanutils.ConversionException, org.antlr.v4.runtime.misc.ParseCancellationException, antlr.RecognitionException, antlr.TokenStreamException, antlr.TokenStreamRecognitionException, antlr.ANTLRException, java.lang.StringBuffer" />
    </module>
    <module name="IllegalThrows" />
    <module name="IllegalToken">
      <property name="tokens"
                value="LABELED_STAT" />
      <property name="tokens"
                value="LITERAL_NATIVE" />
      <property name="tokens"
                value="LITERAL_VOLATILE" />
    </module>
    <module name="IllegalTokenText">
      <property name="tokens"
                value="STRING_LITERAL" />
      <property name="format"
                value="^(US-ASCII|ISO-8859-1|UTF-8|UTF-16BE|UTF-16LE|UTF-16)$" />
      <property name="ignoreCase"
                value="true" />
    </module>
    <module name="OuterTypeFilename" />
    <module name="OuterTypeNumber" />
    <module name="AnonInnerLength">
      <property name="max"
                value="60" />
    </module>
    <module name="IllegalTokenText">
      <property name="tokens"
                value="STRING_LITERAL, CHAR_LITERAL" />
      <property name="format"
                value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
      <property name="message"
                value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
    </module>
    <module name="AvoidEscapedUnicodeCharacters">
      <property name="allowEscapesForControlCharacters"
                value="true" />
      <property name="allowByTailComment"
                value="true" />
      <property name="allowNonPrintableEscapes"
                value="true" />
    </module>
    <module name="IllegalImport" />
    <module name="AvoidStarImport">
      <property name="allowStaticMemberImports"
                value="true" />
    </module>
    <module name="OneTopLevelClass" />
    <module name="NoLineWrap" />
    <module name="EmptyBlock">
      <property name="option"
                value="text" />
    </module>
    <module name="LeftCurly" />
    <module name="RightCurly">
      <property name="id"
                value="RightCurlySame" />
      <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
    </module>
    <module name="RightCurly">
      <property name="id"
                value="RightCurlyAlone" />
      <property name="option"
                value="alone" />
      <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
    </module>
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors"
                value="true" />
      <property name="allowEmptyLambdas"
                value="true" />
      <property name="allowEmptyMethods"
                value="true" />
      <property name="allowEmptyTypes"
                value="true" />
      <property name="allowEmptyLoops"
                value="true" />
      <message key="ws.notFollowed"
               value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
      <message key="ws.notPreceded"
               value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
    </module>
    <module name="OneStatementPerLine">
      <property name="treatTryResourcesAsStatement"
                value="true" />
    </module>
    <module name="MultipleVariableDeclarations" />
    <module name="ArrayTypeStyle" />
    <module name="MissingSwitchDefault" />
    <module name="FallThrough" />
    <module name="UpperEll" />
    <module name="ModifierOrder" />
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields"
                value="true" />
    </module>
    <module name="SeparatorWrap">
      <property name="id"
                value="SeparatorWrapDot" />
      <property name="tokens"
                value="DOT" />
      <property name="option"
                value="nl" />
    </module>
    <module name="SeparatorWrap">
      <property name="id"
                value="SeparatorWrapComma" />
      <property name="tokens"
                value="COMMA" />
      <property name="option"
                value="EOL" />
    </module>
    <module name="SeparatorWrap">
      <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
      <property name="id"
                value="SeparatorWrapEllipsis" />
      <property name="tokens"
                value="ELLIPSIS" />
      <property name="option"
                value="EOL" />
    </module>
    <module name="SeparatorWrap">
      <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
      <property name="id"
                value="SeparatorWrapArrayDeclarator" />
      <property name="tokens"
                value="ARRAY_DECLARATOR" />
      <property name="option"
                value="EOL" />
    </module>
    <module name="SeparatorWrap">
      <property name="id"
                value="SeparatorWrapMethodRef" />
      <property name="tokens"
                value="METHOD_REF" />
      <property name="option"
                value="nl" />
    </module>
    <module name="PackageName">
      <property name="format"
                value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
      <message key="name.invalidPattern"
               value="Package name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="TypeName">
      <message key="name.invalidPattern"
               value="Type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="MemberName">
      <property name="format"
                value="^[a-z][a-zA-Z0-9]*$" />
      <message key="name.invalidPattern"
               value="Member name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="ParameterName">
      <property name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$" />
      <message key="name.invalidPattern"
               value="Parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="LambdaParameterName">
      <property name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$" />
      <message key="name.invalidPattern"
               value="Lambda parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="CatchParameterName">
      <property name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$" />
      <message key="name.invalidPattern"
               value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="LocalVariableName">
      <property name="tokens"
                value="VARIABLE_DEF" />
      <property name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$" />
      <message key="name.invalidPattern"
               value="Local variable name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="ClassTypeParameterName">
      <property name="format"
                value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern"
               value="Class type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="MethodTypeParameterName">
      <property name="format"
                value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern"
               value="Method type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format"
                value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
      <message key="name.invalidPattern"
               value="Interface type name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="NoFinalizer" />
    <module name="GenericWhitespace">
      <message key="ws.followed"
               value="GenericWhitespace ''{0}'' is followed by whitespace." />
      <message key="ws.preceded"
               value="GenericWhitespace ''{0}'' is preceded with whitespace." />
      <message key="ws.illegalFollow"
               value="GenericWhitespace ''{0}'' should followed by whitespace." />
      <message key="ws.notPreceded"
               value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
    </module>
    <module name="ArrayTypeStyle" />
    <!--<module name="Indentation">
      <property name="basicOffset" value="2"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="2"/>
      <property name="throwsIndent" value="2"/>
      <property name="lineWrappingIndentation" value="2"/>
      <property name="arrayInitIndent" value="2"/>
      <property name="forceStrictCondition" value="false"/>
    </module> -->
    <module name="AbbreviationAsWordInName">
      <property name="ignoreFinal"
                value="true" />
      <property name="allowedAbbreviationLength"
                value="3" />
    </module>
    <module name="OverloadMethodsDeclarationOrder" />
    <module name="VariableDeclarationUsageDistance">
      <property name="validateBetweenScopes"
                value="true" />
    </module>
    <module name="RedundantImport" />
    <module name="JavadocStyle" />
    <module name="CustomImportOrder">
      <property name="sortImportsInGroupAlphabetically"
                value="true" />
      <property name="separateLineBetweenGroups"
                value="true" />
      <property name="customImportOrderRules"
                value="STATIC###THIRD_PARTY_PACKAGE" />
    </module>
    <module name="MethodParamPad" />
    <module name="NoWhitespaceBefore">
      <property name="tokens"
                value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF" />
      <property name="allowLineBreaks"
                value="true" />
    </module>
    <module name="ParenPad" />
    <module name="OperatorWrap">
      <property name="option"
                value="nl" />
      <property name="tokens"
                value="DIV_ASSIGN,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,MOD_ASSIGN,            SR_ASSIGN,BSR_ASSIGN,SL_ASSIGN,BXOR_ASSIGN,BOR_ASSIGN,BAND_ASSIGN" />
    </module>
    <module name="NonEmptyAtclauseDescription" />
    <module name="JavadocTagContinuationIndentation">
      <property name="offset"
                value="4" />
    </module>
    <module name="SummaryJavadoc">
      <property name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
    </module>
    <module name="InvalidJavadocPosition" />
    <module name="JavadocParagraph" />
    <module name="AtclauseOrder">
      <property name="tagOrder"
                value="@param, @return, @throws, @deprecated" />
      <property name="target"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
    </module>
    <module name="JavadocMethod">
      <property name="allowMissingParamTags"
                value="true" />
      <property name="validateThrows"
                value="false" />
      <property name="allowMissingReturnTag"
                value="true" />
      <property name="allowedAnnotations"
                value="Override, Test" />
    </module>
    <module name="MethodName">
      <property name="format"
                value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
      <message key="name.invalidPattern"
               value="Method name ''{0}'' must match pattern ''{1}''." />
    </module>
    <module name="SingleLineJavadoc">
      <property name="ignoreInlineTags"
                value="false" />
    </module>
    <module name="EmptyCatchBlock">
      <property name="exceptionVariableName"
                value="expected" />
    </module>
    <module name="CommentsIndentation" />
    <!-- Headers -->
    <module name="MagicNumber">
      <property name="ignoreFieldDeclaration"
                value="true" />
      <property name="ignoreAnnotation"
                value="true" />
      <property name="ignoreHashCodeMethod"
                value="true" />
      <property name="ignoreAnnotationElementDefaults"
                value="true" />
    </module>
    <!-- <module name="ArrayTrailingComma" /> -->
    <module name="EqualsAvoidNull" />
    <module name="IllegalCatch" />
    <module name="PackageDeclaration">
      <property name="matchDirectoryStructure"
                value="true" />
    </module>
    <module name="UnnecessaryParentheses" />
    <module name="NestedTryDepth">
      <property name="max"
                value="1" />
    </module>
    <module name="AnnotationLocation">
      <property name="allowSamelineMultipleAnnotations"
                value="false" />
      <property name="allowSamelineSingleParameterlessAnnotation"
                value="true" />
      <property name="allowSamelineParameterizedAnnotation"
                value="false" />
    </module>
    <module name="AnnotationUseStyle" />
    <module name="PackageAnnotation" />
    <module name="DeclarationOrder" />
    <module name="NoClone" />
    <module name="InnerAssignment" />
    <module name="SuperClone" />
    <module name="SuperFinalize" />
    <module name="RequireThis" />
    <module name="ReturnCount">
      <property name="max"
                value="3" />
      <property name="maxForVoid"
                value="3" />
    </module>
    <module name="IllegalIdentifierName">
      <property name="format"
                value="(?-i)^(?!(record|yield|var                     |permits|sealed|open|transitive|_)$).+$" />
    </module>
    <module name="RecordComponentNumber">
      <property name="max"
                value="3" />
      <property name="accessModifiers"
                value="private" />
    </module>
    <module name="RecordComponentNumber">
      <property name="max"
                value="10" />
      <property name="accessModifiers"
                value="public" />
    </module>
    <module name="RecordTypeParameterName">
      <property name="format"
                value="^[a-zA-Z]$" />
    </module>
    <!-- sevntu checks-->
    <!-- Annotation -->
    <module name="com.github.sevntu.checkstyle.checks.annotation.ForbidAnnotationElementValueCheck">

      <property name="annotationName"
                value="Test" />
      <property name="elementName"
                value="expected" />
      <property name="forbiddenElementValueRegexp"
                value=".*" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.annotation.ForbidAnnotationCheck">

      <property name="annotationNames"
                value="Ignore, VisibleForTesting" />
      <property name="annotationTargets"
                value="METHOD_DEF" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.annotation.RequiredParameterForAnnotationCheck" />
    <module name="com.github.sevntu.checkstyle.checks.annotation.RequiredParameterForAnnotationCheck">

      <property name="annotationName"
                value="Generated" />
      <property name="requiredParameters"
                value="value" />
    </module>
    <!-- Coding -->
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidCCommentsInMethodsCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.NoNullForCollectionReturnCheck">

      <property name="collectionList"
                value="AbstractCollection AbstractList AbstractQueue AbstractSequentialList AbstractSet ArrayBlockingQueue ArrayDeque ArrayList AttributeList BeanContextServicesSupport BeanContextSupport ConcurrentLinkedDeque ConcurrentLinkedQueue ConcurrentSkipListSet CopyOnWriteArrayList CopyOnWriteArraySet DelayQueue EnumSet HashSet JobStateReasons LinkedBlockingDeque LinkedBlockingQueue LinkedHashSet LinkedList LinkedTransferQueue PriorityBlockingQueue PriorityQueue RoleList RoleUnresolvedList Stack SynchronousQueue TreeSet Vector Collection List Map Set" />
      <property name="searchThroughMethodBody"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.CustomDeclarationOrderCheck">

      <property name="customDeclarationOrder"
                value="Field(public) ### Field(protected) ### Field(private) ### CTOR(.*) ### Method(.*)### InnerClass()" />
      <property name="caseSensitive"
                value="true" />
      <property name="fieldPrefix"
                value="" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidReturnInFinallyBlockCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.MultipleStringLiteralsExtendedCheck">

      <property name="allowedDuplicates"
                value="1" />
      <property name="ignoreOccurrenceContext"
                value="ANNOTATION" />
      <property name="ignoreStringsRegexp"
                value="^&quot;&quot;$" />
      <property name="highlightAllDuplicates"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidDefaultSerializableInInnerClassesCheck">

      <property name="allowPartialImplementation"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ConfusingConditionCheck">

      <property name="multiplyFactorForElseBlocks"
                value="4" />
      <property name="ignoreInnerIf"
                value="true" />
      <property name="ignoreSequentialIf"
                value="true" />
      <property name="ignoreNullCaseInIf"
                value="true" />
      <property name="ignoreThrowInElse"
                value="true" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.LogicConditionNeedOptimizationCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.ReturnBooleanFromTernaryCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.ReturnNullInsteadOfBooleanCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidCertainImportsCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidModifiersForTypesCheck">

      <property name="forbiddenClassesRegexpFinal"
                value="" />
      <property name="forbiddenClassesRegexpStatic"
                value="ULC.+" />
      <property name="forbiddenClassesRegexpTransient"
                value="" />
      <property name="forbiddenClassesRegexpVolatile"
                value="" />
      <property name="forbiddenClassesRegexpAnnotation"
                value="" />
      <property name="forbiddenClassesRegexpPrivate"
                value="" />
      <property name="forbiddenClassesRegexpPackagePrivate"
                value="" />
      <property name="forbiddenClassesRegexpProtected"
                value="" />
      <property name="forbiddenClassesRegexpPublic"
                value="" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidCertainMethodCheck">

      <property name="methodName"
                value="assert(True|False)" />
      <property name="argumentCount"
                value="1" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.OverridableMethodInConstructorCheck">

      <property name="checkCloneMethod"
                value="false" />
      <property name="checkReadObjectMethod"
                value="false" />
      <property name="matchMethodsByArgCount"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidNotShortCircuitOperatorsForBooleanCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.MultipleVariableDeclarationsExtendedCheck">

      <property name="ignoreCycles"
                value="false" />
      <property name="ignoreMethods"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.EitherLogOrThrowCheck">

      <property name="loggerFullyQualifiedClassName"
                value="org.slf4j.Logger" />
      <property name="loggingMethodNames"
                value="error, warn, info, debug" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidHidingCauseExceptionCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.IllegalCatchExtendedCheck">

      <property name="allowThrow"
                value="true" />
      <property name="allowRethrow"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ReturnCountExtendedCheck">

      <property name="maxReturnCount"
                value="1" />
      <property name="ignoreMethodLinesCount"
                value="20" />
      <property name="minIgnoreReturnDepth"
                value="4" />
      <property name="ignoreEmptyReturns"
                value="true" />
      <property name="topLinesToIgnoreCount"
                value="5" />
      <property name="ignoreMethodsNames"
                value="equals" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.SimpleAccessorNameNotationCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.UnnecessaryParenthesesExtendedCheck">

      <property name="ignoreCalculationOfBooleanVariables"
                value="false" />
      <property name="ignoreCalculationOfBooleanVariablesWithReturn"
                value="false" />
      <property name="ignoreCalculationOfBooleanVariablesWithAssert"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidInstantiationCheck">

      <property name="forbiddenClasses"
                value="java.lang.NullPointerExceptionCheck" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidConstantAsFirstOperandInConditionCheck">

      <property name="targetConstantTypes"
                value="LITERAL_NULL,LITERAL_TRUE,LITERAL_FALSE,NUM_INT,NUM_DOUBLE,NUM_LONG,NUM_FLOAT" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidThrowAnonymousExceptionsCheck">

      <property name="exceptionClassNameRegex"
                value="^.*Exception" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.MapIterationInForEachLoopCheck">

      <property name="proposeValuesUsage"
                value="true" />
      <property name="proposeKeySetUsage"
                value="false" />
      <property name="proposeEntrySetUsage"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.TernaryPerExpressionCountCheck">

      <property name="maxTernaryPerExpressionCount"
                value="1" />
      <property name="ignoreTernaryOperatorsInBraces"
                value="true" />
      <property name="ignoreIsolatedTernaryOnLine"
                value="true" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.RedundantReturnCheck">

      <property name="allowReturnInEmptyMethodsAndConstructors"
                value="false" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.SingleBreakOrContinueCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.NumericLiteralNeedsUnderscoreCheck">

      <property name="minDecimalSymbolLength"
                value="7" />
      <property name="maxDecimalSymbolsUntilUnderscore"
                value="3" />
      <property name="minHexSymbolLength"
                value="5" />
      <property name="maxHexSymbolsUntilUnderscore"
                value="4" />
      <property name="minBinarySymbolLength"
                value="9" />
      <property name="maxBinarySymbolsUntilUnderscore"
                value="8" />
      <property name="ignoreFieldNamePattern"
                value="serialVersionUID" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.EmptyPublicCtorInClassCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.DiamondOperatorForVariableDefinitionCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.NameConventionForJunit4TestClassesCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.UselessSuperCtorCallCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.UselessSingleCatchCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.WhitespaceBeforeArrayInitializerCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.MoveVariableInsideIfCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.RequireFailForTryCatchInJunitCheck" />
    <module name="com.github.sevntu.checkstyle.checks.coding.PreferMethodReferenceCheck">

      <property name="detectForExpression"
                value="true" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.Jsr305AnnotationsCheck">

      <!-- we ignore this Check only because we are not ready to follow it and refactor whole
           project for now -->
      <property name="severity"
                value="ignore" />
      <property name="packages"
                value="com.github.sevntu.checkstyle.checks.naming,com.github.sevntu.checkstyle.checks.coding" />
      <property name="excludePackages"
                value="com.github.sevntu.checkstyle.checks.sizes,com.github.sevntu.checkstyle.checks.design" />
      <property name="allowOverridingReturnValue"
                value="false" />
      <property name="allowOverridingParameter"
                value="false" />
    </module>
    <!-- Design -->
    <module name="com.github.sevntu.checkstyle.checks.design.ChildBlockLengthCheck">

      <property name="blockTypes"
                value="LITERAL_IF,LITERAL_ELSE,LITERAL_WHILE,LITERAL_DO,LITERAL_FOR,LITERAL_SWITCH,
               LITERAL_TRY,LITERAL_CATCH" />
      <property name="maxChildBlockPercentage"
                value="90" />
      <property name="ignoreBlockLinesCount"
                value="50" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.design.ForbidWildcardAsReturnTypeCheck">

      <property name="checkPublicMethods"
                value="true" />
      <property name="checkPackageMethods"
                value="true" />
      <property name="checkProtectedMethods"
                value="true" />
      <property name="checkPrivateMethods"
                value="false" />
      <property name="checkOverrideMethods"
                value="false" />
      <property name="checkDeprecatedMethods"
                value="false" />
      <property name="allowReturnWildcardWithSuper"
                value="false" />
      <property name="allowReturnWildcardWithExtends"
                value="false" />
      <property name="returnTypeClassNamesIgnoreRegex"
                value="^(Comparator|Comparable)$" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.design.NoMainMethodInAbstractClassCheck" />
    <module name="com.github.sevntu.checkstyle.checks.design.PublicReferenceToPrivateTypeCheck" />
    <module name="com.github.sevntu.checkstyle.checks.design.StaticMethodCandidateCheck">

      <property name="skippedMethods"
                value="readObject, writeObject, readObjectNoData, readResolve, writeReplace" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.design.ConstructorWithoutParamsCheck">

      <property name="classNameFormat"
                value=".*Exception$" />
      <property name="ignoredClassNameFormat"
                value="UnsupportedOperationException" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.design.InnerClassCheck" />
    <module name="com.github.sevntu.checkstyle.checks.design.HideUtilityClassConstructorCheck" />
    <module name="com.github.sevntu.checkstyle.checks.design.NestedSwitchCheck" />
    <module name="com.github.sevntu.checkstyle.checks.design.AvoidConditionInversionCheck" />
    <module name="com.github.sevntu.checkstyle.checks.design.CauseParameterInExceptionCheck" />
    <module name="com.github.sevntu.checkstyle.checks.design.CheckstyleTestMakeupCheck" />
    <!-- Naming -->
    <module name="com.github.sevntu.checkstyle.checks.naming.InterfaceTypeParameterNameCheck">

      <property name="format"
                value="^[A-Z]$" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.naming.EnumValueNameCheck">

      <property name="format"
                value="^[A-Z][a-zA-Z0-9_]*$" />
    </module>
    <module name="com.github.sevntu.checkstyle.checks.naming.UniformEnumConstantNameCheck">

      <property name="formats"
                value="^[A-Z][a-zA-Z0-9]*$,^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$" />
    </module>
    <!-- Sizes -->
    <module name="com.github.sevntu.checkstyle.checks.sizes.LineLengthExtendedCheck">

      <property name="ignorePattern"
                value="^ *\* *([^ ]+|\{@code .*|&lt;a href=&quot;[^&quot;]+&quot;&gt;)$" />
      <property name="max"
                value="100" />
      <property name="tabWidth"
                value="4" />
      <property name="ignoreClass"
                value="false" />
      <property name="ignoreConstructor"
                value="false" />
      <property name="ignoreField"
                value="false" />
      <property name="ignoreMethod"
                value="false" />
    </module>
  </module>
</module>
